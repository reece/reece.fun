#!/usr/bin/env python
"""moves notes from evernote to toodledo

WARNING: This is put together with duct tape and bailing wire. It
works well enough for one-off use. Routine use will suck.  Known
problems:

* Toodledo limits number of uses of tokens. (v. lame)
* poodledo uses api v2 with *GET* posts, which fails for long text
  bodies

Good luck.



Installation:

$ pip install evernote html2text poodledo requests yaml


You'll need files like these:

$ cat <<EOF >~/.config/toodledo.yml
# If you get ToodledoError: Toodledo server returned error: Excessive
# Tokens you'll need to get a new token :-/

# Get token at https://api.toodledo.com/2/account/doc_register.php
app:
  id: 
  token: api5853...

credentials:
  email: yourtoodledo@email.address
  passwd: ...
EOF

$ cat <<EOF >~/.config/evernote.yml
# get auth_token https://www.evernote.com/api/DeveloperToken.action
credentials:
  auth_token: "S=s666:U=..."
EOF


Useful references:

* http://sf.geekitude.com/content/getting-all-notes-notebook-evernote-api-and-python
* https://stackoverflow.com/questions/20080414/read-my-own-evernotes
* https://dev.evernote.com/doc/reference/

"""


import logging
import os
import time

from evernote.api.client import EvernoteClient
from evernote.edam.error.ttypes import EDAMSystemException
from evernote.edam.notestore import NoteStore
from evernote.edam.notestore.ttypes import NoteFilter, NotesMetadataResultSpec
from evernote.edam.type.ttypes import NoteSortOrder

from html2text import html2text

import poodledo

from requests import HTTPError

import yaml


if __name__ == "__main__":
    nb_prefix = ""
    config_dir = os.path.expanduser("~/.config")

    logging.basicConfig(level=logging.INFO)
    logger = logging.getLogger(__name__)

    ecf = yaml.load(open(os.path.join(config_dir, "evernote.yml")))
    tcf = yaml.load(open(os.path.join(config_dir, "toodledo.yml")))


    ec = EvernoteClient(token=ecf["credentials"]["auth_token"], sandbox=False)
    try:
        ens = ec.get_note_store()
    except EDAMSystemException as e:
        logger.warning("Throttled: sleeping {} seconds".format(e.rateLimitDuration))
        time.sleep(e.rateLimitDuration + 3)
        ens = ec.get_note_store()

    tc = poodledo.apiclient.ApiClient(app_id=tcf["app"]["id"], app_token=tcf["app"]["token"])
    tc.authenticate(tcf["credentials"]["email"], tcf["credentials"]["passwd"])

    notebooks = ens.listNotebooks()
    # notebooks = filter(lambda nb: nb.name in "geekery recipes".split(), notebooks)  # DEBUGGING

    folders_needed = set(nb_prefix + nb.name for nb in notebooks) - set(f["name"] for f in tc.getFolders())
    for fn in folders_needed:
        logger.info("Making folder " + fn)
        tc.addFolder(name=fn.encode("UTF-8"))

    folder_id_map = {f["name"]: f["id"] for f in tc.getFolders()}

    t_existing_notes = set((nb["folder"], nb["title"]) for nb in tc.getNotebooks())

    spec = NotesMetadataResultSpec()

    for nb in notebooks:
        nf = NoteFilter(
            notebookGuid=nb.guid,
            order=NoteSortOrder.TITLE)
        nmds = ens.findNotesMetadata(nf, 0, 1000, spec)
        for nmd in nmds.notes:
            note = ens.getNote(nmd.guid, True, False, False, False)
            fn = nb_prefix + nb.name
            fn_id = folder_id_map[fn]
            if (fn_id, note.title) in t_existing_notes:
                logger.info("Skipping {nb.name}/{note.title}: exists".format(
                    nb=nb, note=note))
                continue
            content = note.content.decode("UTF-8")
            try:
                tc.addNotebook(title=note.title, text=html2text(content), folder=fn_id)
            except Exception as e:
                logger.exception("{nb.name}/{note.title}: {e}".format(nb=nb, note=note, e=e))
                continue
            logger.info("Converted {nb.name}/{note.title} ({len} bytes) -> {fn}".format(
                nb=nb, note=note, len=len(content), fn=fn))
